codequotecode {
  Program   = Block+
  Block     = Function
            | While
            | For
            | If ElseIf* Else?    --conditional
            | Statement
  Statement = VarDec
            | Assign
            | Print
            | FuncCall
            | Return
            | Condition
  Function  = function Var Params? is Block+ kwend
  Params    = of Var (and Var)*
  While     = loop until Condition Block* kwend
  For       = loop id from number to number by number Block* kwend
  If        = if Condition Block* ElseIf* Else? kwend
  ElseIf    = else if Condition Block*
  Else      = else Block*
  VarDec    = id "is" Condition
  Assign    = Var is Condition
  Print     = output Condition
  FuncCall  = call Var "with" Exp (and Exp )*   --withArgs
            | call Var                          --noArgs
  Return    = out Condition
  Condition = Condition ("and" | "or") Relation   --logical
            | Relation
  Relation  = Relation ("<=" | ">=" | "<" | ">" | "==" | "!=")  Exp   --binary
            | Exp                                                 
  Exp       = Exp ("+" | "-") Term    --binary
            | Term
  Term      = Term ("*"| "/"|"^"|"%") Factor    --binary
            | Factor
  Factor    = Var
            | number
            | "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""                               --string
            | list "[" (Factor ( "," Factor )* )? "]"                                   --list
            | map "[" ( "[" id ":" Factor "]"  ( ","  "[" id ":" Factor "]" )* )? "]"   --map
            | "(" Exp ")"                                                               --parens
  Var       = id
  number    = digit+ ("." digit+)?
  list      = "list" ~alnum
  map       = "map" ~alnum
  of        = "of" ~alnum
  and       = "and" ~alnum
  loop      = "loop" ~alnum
  until     = "until" ~alnum
  from      = "from" ~alnum
  to        = "to" ~alnum
  by        = "by" ~alnum
  function  = "function" ~alnum
  if        = "if" ~alnum
  out       = "out:" ~alnum
  else      = "else" ~alnum
  is        = "is" ~alnum
  output    = "output" ~alnum
  kwend     = "end" ~alnum
  keyword   = is | output | loop | until | from | to | by | kwend | function | if | map | list | "out:" | "call:"
  id        = ~keyword letter alnum*
  call      = "call:" ~alnum
  space     += comment
  comment   = "!!!" (~"\n" any)* "\n"                      -- singleLine
            | "!?" (~"?!" any)* "?!"                       -- multiLine
  escape    = "\\" ("\\" | "\"")                           -- simple
}