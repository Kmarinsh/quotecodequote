quotecodequote { 
  Program   = Block+
  Block     = Function
            | While
            | For
            | If                                                                        --conditional
            | Class
            | Statement
  Statement = Assign
            | Print
            | ClassCall
            | FuncCall
            | Return
            | Condition 
  Class     = class id Field? Method* kwend
  Field     = has id (and id)* 
  Method    = id Params? is Block* kwend
  Function  = function id Params? is Block+  kwend
  Params    = of Factor (and Factor)*
  While     = loop until Condition Block* kwend
  For       = loop id from number to number by number Block* kwend
  If        = if Condition Block* kwend Elif* Else? 
  Elif      = elif Condition Block* kwend
  Else      = else Block* kwend
  Assign    = Var is (Condition | ClassCall)
  Print     = output Condition
  ClassCall = new id Args? 
  ClassAttr = id colon id Args?                                                          
  FuncCall  = call id Args?                               
  Args      = with id as Exp (and id as Exp)*                                        
  Return    = out Condition?
  Condition = Condition ("and" | "or") Relation                                         --logical
            | Relation
  Relation  = Relation ("<=" | ">=" | "<" | ">" | "==" | "!=")  Exp                     --binary
            | Exp                                                 
  Exp       = Exp ("+" | "-") Term                                                      --binary
            | Term
  Term      = Term ("*"| "/"|"^"|"%") Factor                                            --binary
            | Factor
 Factor     =
 			 FuncCall
            | ClassAttr
            | Var
            | number
            | "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""                               --string
            | list "[" (Factor ( "," Factor )* )? "]"                                   --list
            | map "[" ( "[" id ":" Factor "]"  ( ","  "[" id ":" Factor "]" )* )? "]"   --map
            | "(" Exp ")"                                                               --parens
  Var       =  ClassAttr
  | id
  number    = ("-")? digit+ ("." digit+)?
  list      = "list" 
  map       = "map" 
  of        = "of" 
  and       = "and" 
  loop      = "loop" 
  until     = "until"
  from      = "from" 
  to        = "to" 
  by        = "by" 
  function  = "function" 
  if        = "if" 
  out       = "out" 
  else      = "else" 
  elif      = "elif" 
  is        = "is" 
  output    = "output" 
  kwend     = "end" 
  call      = "call" 
  class     = "class"
  new       = "new"
  has       = "has"
  with      = "with"
  as        = "as"
  colon     = ":"
  id        = ~keyword letter alnum*  
  keyword   = is | output | loop | until | from | to | by | kwend | function | if | map | list | out | call | elif | class | has | with | as | new | colon
  space     += comment
  comment   = "!!!" (~"\n" any)* "\n"                      -- singleLine
            | "!?" (~"?!" any)* "?!"                       -- multiLine
  escape    = "\\" ("\\" | "\"")                       
}